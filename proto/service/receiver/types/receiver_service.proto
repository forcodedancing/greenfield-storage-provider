syntax = "proto3";
package service.receiver.types;

import "greenfield/storage/types.proto";

option go_package = "github.com/bnb-chain/greenfield-storage-provider/service/receiver/types";

// ReceivePieceRequest is request type for the ReceivePiece RPC method.
message ReceivePieceRequest {
  // object_info defines the information of the object.
  bnbchain.greenfield.storage.ObjectInfo object_info = 1;
  // segment_idx defines the index of segment for piece data.
  uint32 segment_idx = 2;
  // replica_idx defines the index of replicate for piece data.
  uint32 replicate_idx = 3;
  // piece_size defines the size of piece data.
  bytes checksum = 4;
  // piece_data defines the data that replicate piece to storage provider.
  bytes piece_data = 5;
}

// ReceivePieceResponse is response type for the ReceivePiece RPC method.
message ReceivePieceResponse {
}

// DoneReplicateRequest is request type for the DoneReplicate RPC method.
message DoneReplicateRequest {
  // object_info defines the information of the object.
  bnbchain.greenfield.storage.ObjectInfo object_info = 1;
}

// DoneReplicateResponse is response type for the DoneReplicate RPC method.
message DoneReplicateResponse {
  // integrity_hash defines the integrity hash of the replicate payload.
  bytes integrity_hash = 1;
  // signature defines the result of storage provider sign the replicate payload.
  bytes signature = 2;
}

// ReceiverService defines the gRPC service of syncing the replicate object .
service ReceiverService {
  // ReceivePiece receives a piece data and store it into piece store.
  rpc ReceivePiece(stream ReceivePieceRequest) returns (ReceivePieceResponse) {};
  // DoneReplicate returns the integrity hash of all pieces and the signature of signing the integrity hash
  rpc DoneReplicate(DoneReplicateRequest) returns (DoneReplicateResponse) {};
}